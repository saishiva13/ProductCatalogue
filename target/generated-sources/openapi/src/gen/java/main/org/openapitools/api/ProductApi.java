/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CategoryDTO;
import org.openapitools.model.ErrorDTO;
import org.openapitools.model.InventoryDTO;
import org.openapitools.model.PageResponseDTO;
import org.openapitools.model.ProductDTO;
import org.openapitools.model.ProductSearchRequestDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-23T16:49:06.948148200+05:30[Asia/Calcutta]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Product", description = "the Product API")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/categories : Create a new category
     *
     * @param categoryDTO  (required)
     * @return Category created successfully (status code 201)
     */
    @Operation(
        operationId = "createCategory",
        summary = "Create a new category",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Category created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CategoryDTO> createCategory(
        @Parameter(name = "CategoryDTO", description = "", required = true) @Valid @RequestBody CategoryDTO categoryDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/products : Create a new product
     *
     * @param productDTO  (required)
     * @return Product created successfully (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Create a new product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Product created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> createProduct(
        @Parameter(name = "ProductDTO", description = "", required = true) @Valid @RequestBody ProductDTO productDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"categoryIds\" : [ 1, 1 ], \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 6.027456183070403, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"updatedDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/categories/{id} : Delete category
     *
     * @param id  (required)
     * @return Category deleted successfully (status code 204)
     *         or Category not found (status code 404)
     */
    @Operation(
        operationId = "deleteCategory",
        summary = "Delete category",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Category deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Category not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/categories/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteCategory(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/products/{id} : Delete product
     *
     * @param id  (required)
     * @return Product deleted successfully (status code 204)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Product deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Product not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/products/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteProduct(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/categories : Get all categories
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getAllCategories",
        summary = "Get all categories",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CategoryDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/categories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CategoryDTO>> getAllCategories(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }, { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/inventory : Get inventory for all products
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getAllInventory",
        summary = "Get inventory for all products",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = InventoryDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/inventory",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<InventoryDTO>> getAllInventory(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 0, \"productId\" : 0 }, { \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 0, \"productId\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/products : Get all products with pagination
     *
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getAllProducts",
        summary = "Get all products with pagination",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageResponseDTO> getAllProducts(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pageNumber\" : 2, \"totalPages\" : 5, \"pageSize\" : 7, \"content\" : [ { \"categoryIds\" : [ 1, 1 ], \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 6.027456183070403, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"updatedDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"categoryIds\" : [ 1, 1 ], \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 6.027456183070403, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"updatedDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"totalElements\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/categories/{id} : Get category by ID
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Category not found (status code 404)
     */
    @Operation(
        operationId = "getCategoryById",
        summary = "Get category by ID",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Category not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/categories/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CategoryDTO> getCategoryById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/inventory/low-stock : Get products with low stock
     *
     * @param threshold  (optional, default to 10)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getLowStockProducts",
        summary = "Get products with low stock",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = InventoryDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/inventory/low-stock",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<InventoryDTO>> getLowStockProducts(
        @Parameter(name = "threshold", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "threshold", required = false, defaultValue = "10") Integer threshold
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 0, \"productId\" : 0 }, { \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 0, \"productId\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/products/{id} : Get product by ID
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Get product by ID",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> getProductById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"categoryIds\" : [ 1, 1 ], \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 6.027456183070403, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"updatedDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/products/search : Search products with filters
     *
     * @param productSearchRequestDTO  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "searchProducts",
        summary = "Search products with filters",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/products/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PageResponseDTO> searchProducts(
        @Parameter(name = "ProductSearchRequestDTO", description = "", required = true) @Valid @RequestBody ProductSearchRequestDTO productSearchRequestDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pageNumber\" : 2, \"totalPages\" : 5, \"pageSize\" : 7, \"content\" : [ { \"categoryIds\" : [ 1, 1 ], \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 6.027456183070403, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"updatedDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"categoryIds\" : [ 1, 1 ], \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 6.027456183070403, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"updatedDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"totalElements\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/categories/{id} : Update category
     *
     * @param id  (required)
     * @param categoryDTO  (required)
     * @return Category updated successfully (status code 200)
     *         or Category not found (status code 404)
     */
    @Operation(
        operationId = "updateCategory",
        summary = "Update category",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Category not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/categories/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CategoryDTO> updateCategory(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CategoryDTO", description = "", required = true) @Valid @RequestBody CategoryDTO categoryDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/inventory : Update product inventory
     *
     * @param inventoryDTO  (required)
     * @return Inventory updated successfully (status code 200)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "updateInventory",
        summary = "Update product inventory",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Inventory updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InventoryDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/inventory",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<InventoryDTO> updateInventory(
        @Parameter(name = "InventoryDTO", description = "", required = true) @Valid @RequestBody InventoryDTO inventoryDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 0, \"productId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/products/{id} : Update product
     *
     * @param id  (required)
     * @param productDTO  (required)
     * @return Product updated successfully (status code 200)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/products/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> updateProduct(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ProductDTO", description = "", required = true) @Valid @RequestBody ProductDTO productDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"categoryIds\" : [ 1, 1 ], \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 6.027456183070403, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"updatedDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

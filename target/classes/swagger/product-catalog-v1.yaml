openapi: 3.0.3
info:
  title: Product Catalog API
  description: API for managing products, categories, and inventory
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name : Product
components:
  schemas:
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        price:
          type: number
          format: double
        categoryIds:
          type: array
          items:
            type: integer
            format: int64
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
      required:
        - name
        - price

    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 200
      required:
        - name

    InventoryDTO:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          minimum: 0
        lastUpdated:
          type: string
          format: date-time
      required:
        - productId
        - quantity

    ProductSearchRequestDTO:
      type: object
      properties:
        searchTerm:
          type: string
        categoryId:
          type: integer
          format: int64
        minPrice:
          type: number
          format: double
        maxPrice:
          type: number
          format: double
        sortBy:
          type: string
          enum: [name, price, date]
        sortDirection:
          type: string
          enum: [asc, desc]
        page:
          type: integer
          minimum: 0
          default: 0
        size:
          type: integer
          minimum: 1
          maximum: 100
          default: 20

    PageResponseDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductDTO'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        pageNumber:
          type: integer
        pageSize:
          type: integer

    ErrorDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time

paths:
  /api/v1/products:
    post:
      tags :
        - Product
      summary: Create a new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    get:
      tags:
        - Product
      summary: Get all products with pagination
      operationId: getAllProducts
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseDTO'

  /api/v1/products/{id}:
    get:
      tags:
        - Product
      summary: Get product by ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    put:
      tags:
        - Product
      summary: Update product
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    delete:
      tags:
        - Product
      summary: Delete product
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /api/v1/products/search:
    post:
      tags:
        - Product
      summary: Search products with filters
      operationId: searchProducts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSearchRequestDTO'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseDTO'

  /api/v1/categories:
    post:
      tags:
        - Product
      summary: Create a new category
      operationId: createCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'

    get:
      tags:
        - Product
      summary: Get all categories
      operationId: getAllCategories
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'

  /api/v1/categories/{id}:
    get:
      tags:
        - Product
      summary: Get category by ID
      operationId: getCategoryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    put:
      tags:
        - Product
      summary: Update category
      operationId: updateCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    delete:
      tags:
        - Product
      summary: Delete category
      operationId: deleteCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /api/v1/inventory:
    put:
      tags:
        - Product
      summary: Update product inventory
      operationId: updateInventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryDTO'
      responses:
        '200':
          description: Inventory updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryDTO'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    get:
      tags:
        - Product
      summary: Get inventory for all products
      operationId: getAllInventory
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryDTO'

  /api/v1/inventory/low-stock:
    get:
      tags:
        - Product
      summary: Get products with low stock
      operationId: getLowStockProducts
      parameters:
        - name: threshold
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryDTO'